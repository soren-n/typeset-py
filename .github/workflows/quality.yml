name: Quality Assurance

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  rust-quality:
    name: Rust Quality Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.7.8

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        run: cargo test --verbose

      - name: Check for security vulnerabilities
        run: |
          cargo install cargo-audit || true
          cargo audit

  python-quality:
    name: Python Quality Checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up uv
        uses: astral-sh/setup-uv@v6

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.7.8

      - name: Install dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install "maturin>=1.9"

      - name: Build extension
        run: |
          source .venv/bin/activate
          maturin develop

      - name: Test Python imports
        run: |
          source .venv/bin/activate
          python -c "import typeset; print('Import successful')"
          python -c "import typeset; print(typeset.render(typeset.compile(typeset.text('hello')), 2, 80))"

  semantic-versioning:
    name: Semantic Versioning Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-semver-checks
        run: cargo install cargo-semver-checks

      - name: Check semantic versioning
        run: cargo semver-checks check-release

  pre-commit:
    name: Pre-commit Hooks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Set up uv
        uses: astral-sh/setup-uv@v6

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install pre-commit
        run: |
          uv tool install pre-commit

      - name: Run pre-commit
        run: pre-commit run --all-files
